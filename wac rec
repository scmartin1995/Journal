 function createWavEncoder(sampleRate){
    let buffers=[]; let length=0;
    function write(input){ // input: Float32Array
      const pcm = new Int16Array(input.length);
      for(let i=0;i<input.length;i++){
        let s = Math.max(-1, Math.min(1, input[i]));
        pcm[i] = s<0 ? s*0x8000 : s*0x7FFF;
      }
      buffers.push(pcm);
      length += pcm.length;
    }
    function encodeWAV(){
      const headerSize=44;
      const dataSize=length*2; // 16-bit mono
      const total=headerSize+dataSize;
      const buf=new ArrayBuffer(total);
      const view=new DataView(buf);
      function setStr(o,str){for(let i=0;i<str.length;i++) view.setUint8(o+i,str.charCodeAt(i));}
      setStr(0,'RIFF');
      view.setUint32(4,36+dataSize,true);
      setStr(8,'WAVE');
      setStr(12,'fmt ');
      view.setUint32(16,16,true);
      view.setUint16(20,1,true);
      view.setUint16(22,1,true);
      view.setUint32(24,sampleRate,true);
      view.setUint32(28,sampleRate*2,true);
      view.setUint16(32,2,true);
      view.setUint16(34,16,true);
      setStr(36,'data');
      view.setUint32(40,dataSize,true);
      let off=44;
      for(const pcm of buffers){
        for(let i=0;i<pcm.length;i++,off+=2){ view.setInt16(off, pcm[i], true); }
      }
      return new Blob([view],{type:'audio/wav'});
    }
    return {write,encodeWAV};
  }
